<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!--循环依赖的三种情况-->
	<!--
	    1.构造器循环依赖，无法解决，抛出BeanCurrentlyInCreationException
	         spring容器创建testA，首先去"当前创建bean池"查找是否当前bean正在创建，如果没发现，则继续准备其需要的构造器参数testB，并将testA标识符放到"当前创建bean池"
	         spring容器创建testB，首先去"当前创建bean池"查找是否当前bean正在创建，如果没发现，则继续准备其需要的构造器参数testC，并将testB标识符放到"当前创建bean池"
	         spring容器创建testC，首先去"当前创建bean池"查找是否当前bean正在创建，如果没发现，则继续准备其需要的构造器参数testA，并将testC标识符放到"当前创建bean池"
	         到此为止，spring容器要去创建testA，发现该bean标识符在"当前创建池bean中"，因为表示循环依赖，抛出BeanCurrentlyInCreationException
	-->
	<!--<bean id="testA" class="com.mashibing.circularDependencies.TestA">-->
		<!--<constructor-arg index="0" ref="testB"/>-->
	<!--</bean>-->
	<!--<bean id="testB" class="com.mashibing.circularDependencies.TestB">-->
		<!--<constructor-arg index="0" ref="testC"/>-->
	<!--</bean>-->
	<!--<bean id="testC" class="com.mashibing.circularDependencies.TestC">-->
		<!--<constructor-arg index="0" ref="testA"/>-->
	<!--</bean>-->

	<!--
	    2.setter循环依赖，只能解决单例模式下的循环依赖
	         spring容器创建testA，首先根据无参构造器创建该bean，并暴露一个"ObjectFactory"，用于返回一个提前暴露创建中的bean，
	      并将testA标识符放到"当前创建bean池"，然后进行setter注入testB
	         spring容器创建testB，首先根据无参构造器创建该bean，并暴露一个"ObjectFactory"，用于返回一个提前暴露创建中的bean，
	      并将testB标识符放到"当前创建bean池"，然后进行setter注入testC
	         spring容器创建testC，首先根据无参构造器创建该bean，并暴露一个"ObjectFactory"，用于返回一个提前暴露创建中的bean，
	      并将testC标识符放到"当前创建bean池"，然后进行setter注入testA，进行注入testA时由于提前暴露了"ObjectFactory"工厂，从而使用它返回提前暴露一个创建中的bean
	         最后再依赖注入testB、testA


	 -->
	<!--<bean id="testA" class="com.mashibing.circularDependencies.TestA">-->
		<!--<property name="testB" ref="testB"/>-->
	<!--</bean>-->
	<!--<bean id="testB" class="com.mashibing.circularDependencies.TestB">-->
		<!--<property name="testC" ref="testC"/>-->
	<!--</bean>-->
	<!--<bean id="testC" class="com.mashibing.circularDependencies.TestC">-->
		<!--<property name="testA" ref="testA"/>-->
	<!--</bean>-->

	<!--
	    3.prototype作用域循环依赖，无法完成依赖注入，因为不进行缓存
	         对于prototype作用域的bean，spring容器无法完成依赖注入，因为spring容器不进行缓存prototype作用域的bean，因此无法提前暴露一个创建中的bean
	 -->
	<bean id="testA" class="com.mashibing.circularDependencies.TestA" scope="prototype">
		<property name="testB" ref="testB"/>
	</bean>
	<bean id="testB" class="com.mashibing.circularDependencies.TestB" scope="prototype">
		<property name="testC" ref="testC"/>
	</bean>
	<bean id="testC" class="com.mashibing.circularDependencies.TestC" scope="prototype">
		<property name="testA" ref="testA"/>
	</bean>
</beans>